解法还可以进一步优化到 O(nlgX)，其中X为最大值和最小值的差值，我们并不用对每一行都做二分搜索法，
我们注意到每列也是有序的，我们可以利用这个性质，从数组的左下角开始查找，如果比目标值小，
我们就向右移一位，而且我们知道当前列的当前位置的上面所有的数字都小于目标值，
那么 cnt += i+1，反之则向上移一位，这样我们也能算出 cnt 的值。
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int left=matrix[0][0],right=matrix.back().back();
        while(left<right)
        {
            int cnt=0;
            int mid=left+(right-left)/2;
            cnt=searchless(matrix,mid);
            if(cnt<k)
                left=mid+1;
            else
                right=mid;                
        }
        return left;
    }
    int searchless(vector<vector<int>>& matrix,int target)
    {
        int n=matrix.size();
        int i=n-1,j=0,res=0;
        while(i>=0&&j<n)
        {
            if(matrix[i][j]<=target)
            {
                j++;
                res+=i+1;
            }          
            else
                i--;
        }
        return res;
    }
};
