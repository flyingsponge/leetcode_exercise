class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> out;
        int n=s.size();
        vector<vector<bool>> dp(n,vector<bool>(n));
        for(int i=0;i<n;i++)
        {
           for(int j=0;j<=i;j++)
           {
              if(s[i]==s[j]&&(i-j<=2 || dp[j+1][i-1]))  
                  dp[j][i]=true;
           } 
        }
        partitionDFS(s,dp,0,out,res);
        return res;
    }
    void partitionDFS(string s,vector<vector<bool>>& dp,int start,vector<string>& out,vector<vector<string>>& res)
    {
        if(start==s.size())
        {
            res.push_back(out);
            return;
        }            
        for(int i=start;i<s.size();i++)
        {
            if(!dp[start][i])
                continue;
            out.push_back(s.substr(start,i-start+1));
            partitionDFS(s,dp,i+1,out,res);
            out.pop_back();
        }
    }
    
};
