class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> out;
        partitionDFS(s,0,out,res);
        return res;
    }
    void partitionDFS(string s,int start,vector<string>& out,vector<vector<string>>& res)
    {
        if(start==s.size())
        {
            res.push_back(out);
            return;
        }            
        for(int i=start;i<s.size();i++)
        {
            if(!Palindrome(s,start,i))
                continue;
            out.push_back(s.substr(start,i-start+1));
            partitionDFS(s,i+1,out,res);
            out.pop_back();
        }
    }
    bool Palindrome(string s,int start,int end)
    {
        int left=start,right=end;
        while(left<right)
        {
            if(s[left]!=s[right])
                return false;
            left++;
            right--;
        }
        return true;
    }
};
