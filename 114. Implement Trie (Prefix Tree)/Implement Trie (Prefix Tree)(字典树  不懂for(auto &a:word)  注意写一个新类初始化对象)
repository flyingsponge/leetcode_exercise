class TrieNode{
public:
    bool isWord;
    /** Initialize your data structure here. */
    
    TrieNode* child[26];
    TrieNode() : isWord(false)
    {
//        root=new Trie();
        for(auto &a:child)
            a=NULL;
    }
};

class Trie {
public:
    
    
    Trie()
    {
       root=new TrieNode(); 
    }
    
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* p=root;
        for(auto &a:word)
        {
            int n=a-'a';
            if(!p->child[n])
                p->child[n]=new TrieNode();            
            p=p->child[n];
        }
        p->isWord=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* p=root;
        for(auto &a:word)
        {
            int n=a-'a';
            if(!p->child[n])
                return false;
            p=p->child[n];
        }
        return p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* p=root;
        for(auto &a:prefix)
        {
            int n=a-'a';
            if(!p->child[n])
                return false;
            p=p->child[n];
        }   
        return true;
    }
private:
    TrieNode* root;
    
};
/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
